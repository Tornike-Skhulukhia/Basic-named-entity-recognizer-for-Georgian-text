def normalize_surname(surname):
    """
    gets georgian surname and returns it in base form
    (სახელობითი ბრუნვა)

    ---------------------------------------------
    Warning:
    ---------------------------------------------
        function only partially removes things
            'თან', 'თვის' ... from the end...
        and if just the word "თვის", "თან" was passed, returns empty string - ""
    ---------------------------------------------

    ex:
        'სააკაშვილი' --> 'სააკაშვილი'
        'სააკაშვილმა' --> 'სააკაშვილი'
        'სააკაშვილს' --> 'სააკაშვილი'

    helper link - http://www.nplg.gov.ge/civil/statiebi/wignebi/qartul_enis_marTlwera/qartul_enis_marTlwera-tavi-3.htm
    """

    # case when for example "თვის" was passed - it most probably is not name or its part,
    # so returning empty string should not be the issue
    if surname in {"თან", "სთან", "თვის", "ზე", "სა"}:
        return ""

    #################################
    # basic preprocessing
    #################################
    if surname.endswith("თან"):
        if surname.endswith("სთან"):
            surname = surname[:-3]
        else:
            surname = f"{surname[:-3]}ს"
    elif surname.endswith("თვის"):
        surname = surname[:-4]
    elif surname.endswith("ზე"):
        surname = f"{surname[:-2]}ს"
    elif surname.endswith("სა"):
        surname = surname[:-1]

    #################################

    last_4_letters = surname[-4:]
    last_3_letters = surname[-3:]
    last_2_letters = surname[-2:]
    last_letter = surname[-1]

    vowels = "აეიოუ"

    # წოდებითი
    if last_letter == "ო":
        # otherwise we get "საბი" :-D
        if surname in {"საბო"}:
            return surname

        if last_3_letters[0] in vowels:
            return f"{surname[:-1]}ი"
        else:
            return surname

    # მოთხრობითი
    if last_letter == "მ":
        return f"{surname[:-1]}"
    if last_2_letters == "მა":
        return f"{surname[:-2]}ი"

    # ვითარებითი | - ლ
    if last_2_letters == "ად" and last_3_letters[0] != "ლ":
        if last_3_letters[0] not in vowels:
            return f"{surname[:-2]}ი"
        else:
            return f"{surname[:-1]}"
    if last_letter == "დ" and last_3_letters[0] != "ლ":
        return f"{surname[:-1]}"

    # მიცემითი
    if last_letter == "ს" and last_2_letters[0] != "ი":
        if last_2_letters[0] in vowels:
            return f"{surname[:-1]}"
        else:
            return f"{surname[:-1]}ი"

    # ნათესაობითი & მოქმედებითი
    if last_3_letters in ["ძის", "ძით"]:
        return f"{surname[:-2]}ე"
    if last_3_letters in ["ლის", "ლით", "ლად"] and last_4_letters[0] not in vowels:
        return f"{surname[:-3]}ელი"
    if last_3_letters in ["ლად"] and last_4_letters[0] in vowels:
        return f"{surname[:-2]}ი"
    if last_letter in ["ს", "თ"]:
        return f"{surname[:-1]}"

    return surname


if __name__ == "__main__":
    tests = {
        "სააკაშვილი": "სააკაშვილი",
        "სააკაშვილმა": "სააკაშვილი",
        "სააკაშვილს": "სააკაშვილი",
        "სააკაშვილის": "სააკაშვილი",
        "სააკაშვილით": "სააკაშვილი",
        "სააკაშვილად": "სააკაშვილი",
        "სააკაშვილო": "სააკაშვილი",
        "ბრეგვაძე": "ბრეგვაძე",
        "ბრეგვაძემ": "ბრეგვაძე",
        "ბრეგვაძეს": "ბრეგვაძე",
        "ბრეგვაძის": "ბრეგვაძე",
        "ბრეგვაძით": "ბრეგვაძე",
        "ბრეგვაძედ": "ბრეგვაძე",
        "ბრეგვაძე": "ბრეგვაძე",
        "ბოკერია": "ბოკერია",
        "ბოკერიამ": "ბოკერია",
        "ბოკერიას": "ბოკერია",
        "ბოკერიას": "ბოკერია",
        "ბოკერიათ": "ბოკერია",
        "ბოკერიად": "ბოკერია",
        "ბოკერია": "ბოკერია",
        "გილაური": "გილაური",
        "გილაურმა": "გილაური",
        "გილაურს": "გილაური",
        "გილაურის": "გილაური",
        "გილაურით": "გილაური",
        "გილაურად": "გილაური",
        "გილაურო": "გილაური",
        "წერეთელი": "წერეთელი",
        "წერეთელმა": "წერეთელი",
        "წერეთელს": "წერეთელი",
        "წერეთლის": "წერეთელი",
        "წერეთლით": "წერეთელი",
        "წერეთლად": "წერეთელი",
        "წერეთელი": "წერეთელი",
        "ბოდაველი": "ბოდაველი",
        "ბოდაველმა": "ბოდაველი",
        "ბოდაველს": "ბოდაველი",
        "ბოდაველის": "ბოდაველი",
        "ბოდაველით": "ბოდაველი",
        "ბოდაველად": "ბოდაველი",
        "ბოდაველო": "ბოდაველი",
        "სერგეენკო": "სერგეენკო",
        "სერგეენკომ": "სერგეენკო",
        "სერგეენკოს": "სერგეენკო",
        "სერგეენკოს": "სერგეენკო",
        "სერგეენკოთ": "სერგეენკო",
        "სერგეენკოდ": "სერგეენკო",
        "სერგეენკო": "სერგეენკო",
        "ბერიძე": "ბერიძე",
        "ბერიძეს": "ბერიძე",
        "ბერიძის": "ბერიძე",
        "ბერიძემ": "ბერიძე",
        # with additions
        "სააკაშვილთან": "სააკაშვილი",
        "სერგეენკოსთან": "სერგეენკო",
        "დეგნანთან": "დეგნანი",
        "გილაურთან": "გილაური",
        "წერეთელთან": "წერეთელი",
        "ბოკერიასთან": "ბოკერია",
        "ბოდაველთან": "ბოდაველი",
        ###########
        "სააკაშვილზე": "სააკაშვილი",
        "სერგეენკოზე": "სერგეენკო",
        "დეგნანზე": "დეგნანი",
        "გილაურზე": "გილაური",
        "წერეთელზე": "წერეთელი",
        "ბოკერიაზე": "ბოკერია",
        "ბოდაველზე": "ბოდაველი",
        ##########################
        "სააკაშვილსა": "სააკაშვილი",
        "ბოდაველსა": "ბოდაველი",
        "გვარამიასა": "გვარამია",
        "სერგეენკოსა": "სერგეენკო",
        "ბერიძესა": "ბერიძე",
        #########################
        "სააკაშვილისთვის": "სააკაშვილი",
        "ბოდაველისთვის": "ბოდაველი",
        "გვარამიასთვის": "გვარამია",
        "სერგეენკოსთვის": "სერგეენკო",
        "ბერიძისთვის": "ბერიძე",
        #########################
        "საბო": "საბო",
        "საბომ": "საბო",
        "საბოს": "საბო",
        "საბოს": "საბო",
        "საბოდ": "საბო",
        "საბო": "საბო",
        "საბოსთვის": "საბო",
        "საბოზე": "საბო",  # :-(
        "საბოსა": "საბო",
        #########################
        "ინი": "ინი",
        "ინმა": "ინი",
        "ინს": "ინი",
        "ინით": "ინი",
        "ინად": "ინი",
        #########################
        # test exceptions
        "თან": "",
        "სთან": "",
        "თვის": "",
        "ზე": "",
        "სა": "",
        #########################
        #########################
    }

    for i, correct in tests.items():
        res = normalize_surname(i)
        if res != correct:
            print(" Error: ", i, "-->", res, "!=", correct)
        # assert normalize_surname(i) == correct
